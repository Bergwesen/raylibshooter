  


    Drawing to the screen.
    Handling user input.
    Game loop.
    Creating and managing a dynamic number of objects (e.g., factory pattern).
    State machines for enemy AI.
    Playing sound.
    Using shaders.
    Networking for online features.

https://gameprogrammingpatterns.com/introduction.html

alien leben 
schusscode
schuss zu einer queue gestalten


Vector2 Schuss::schusslocater(std::vector<std::vector<Alien*>> &Alienblock){
  int zeile = -1;
  
  for(auto x : Alienblock[0] ){
    zeile = zeile +1;

    //std::cout <<  position.x << " ist in  " << x->getx() <<"-"<< x->getwidth()+x->getx()<< std::endl;
    if( x != NULL){
    //std::cout <<  position.x << " ist in  " << x->getx() <<"-"<< x->getwidth()+x->getx()<< std::endl;
    if( position.x >= x->getx() && (x->getx()+x->getwidth()) >= position.x){
       // std::cout << "     test " << position.x << " und kkkk " << x->getx() << std::endl;
        
        break;
    }
    }
  }
  int spalte = -1;
  for(auto x : Alienblock){
        spalte = spalte +1;
       // if(x[zeile] != NULL){
        if(!x[zeile]->tot()){
       // std::cout << " test " << position.y << " und " << x[zeile]->geth()<<  " und " << x[zeile]->getheight()<< std::endl;
        if( (position.y+groesse.y ) >= x[zeile]->geth() && (position.y+groesse.y) <= x[zeile]->geth() + x[zeile]->getheight()  ){
         std::cout<< " KILLED" << std::endl; 
         dead = 1;
          int restleben = x[zeile]->hit();
        //  std::cout<<" leben " << restleben <<std::endl;
         if(restleben== 0){
            //x[zeile] = NULL;
         //   std::cout<<"drinnnnnnnen"<<std::endl;
         }
         break;
        }
        }
  }